---
AWSTemplateFormatVersion: '2010-09-09'
Description: Create a VPC for K8S-Testing
Parameters:
 VPCSubnetCidrBlock:
  Type: String
  Default: 10.0.0.0/16
  AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"

 AvailabilityZone1:
  Type: String
  Default: a
  AllowedValues:
   - a
   - b

 AvailabilityZone2:
  Type: String
  Default: b
  AllowedValues:
   - a
   - b

 PublicSubnetCidrBlock1:
  Type: String
  Default: 10.0.1.0/24
  AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"

 PublicSubnetCidrBlock2:
  Type: String
  Default: 10.0.2.0/24
  AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"

 PrivateSubnetCidrBlock1:
  Type: String
  Default: 10.0.10.0/24
  AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"

 PrivateSubnetCidrBlock2:
  Type: String
  Default: 10.0.20.0/24
  AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"

 RemoteCidrForSecurityGroup:
  Type: String
  Default: 0.0.0.0/0
  AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"


Resources:
 VPC:
  Type: AWS::EC2::VPC
  Properties:
   EnableDnsSupport: true
   EnableDnsHostnames: true
   CidrBlock: !Ref VPCSubnetCidrBlock
   Tags:
    - Key: Name
      Value: !Ref "AWS::StackName"

 PublicSubnet1:
  Type: AWS::EC2::Subnet
  DependsOn: VPC
  Properties:
   VpcId: !Ref VPC
   AvailabilityZone: !Join [ "", [ !Ref "AWS::Region", !Ref AvailabilityZone1 ]]
   CidrBlock: !Ref PublicSubnetCidrBlock1
   Tags:
    - Key: Name
      Value: !Join [ "", [ !Ref "AWS::StackName", "-public-az1" ]]

 PublicSubnet2:
  Type: AWS::EC2::Subnet
  DependsOn: VPC
  Properties:
   VpcId: !Ref VPC
   AvailabilityZone: !Join ["", [ !Ref "AWS::Region", !Ref AvailabilityZone2 ]]
   CidrBlock: !Ref PublicSubnetCidrBlock2
   Tags:
    - Key: Name
      Value: !Join [ "", [ !Ref "AWS::StackName", "-public-az2" ]]

 InternetGateway:
  Type: AWS::EC2::InternetGateway
  Properties:
   Tags:
    - Key: Name
      Value: !Ref "AWS::StackName"

 GatewayToInternet:
  Type: AWS::EC2::VPCGatewayAttachment
  DependsOn:
   - InternetGateway
   - VPC
  Properties:
   VpcId: !Ref VPC
   InternetGatewayId: !Ref InternetGateway

 PublicRouteTable:
  Type: AWS::EC2::RouteTable
  DependsOn: VPC
  Properties:
   VpcId: !Ref VPC
   Tags:
    - Key: Name
      Value: !Join [ "", [ !Ref "AWS::StackName", "-public" ]]

 PublicRoute:
  Type: AWS::EC2::Route
  DependsOn:
   - PublicRouteTable
   - InternetGateway
  Properties:
   RouteTableId: !Ref PublicRouteTable
   DestinationCidrBlock: 0.0.0.0/0
   GatewayId: !Ref InternetGateway

 PublicSubnetRouteTableAssociation1:
  Type: AWS::EC2::SubnetRouteTableAssociation
  DependsOn:
   - PublicSubnet1
   - PublicRouteTable
  Properties:
   SubnetId: !Ref PublicSubnet1
   RouteTableId: !Ref PublicRouteTable

 PublicSubnetRouteTableAssociation2:
  Type: AWS::EC2::SubnetRouteTableAssociation
  DependsOn:
   - PublicSubnet2
   - PublicRouteTable
   - GatewayToInternet
  Properties:
   SubnetId: !Ref PublicSubnet2
   RouteTableId: !Ref PublicRouteTable

 PrivateSubnetNatRouteTableAssociation2:
  Type: AWS::EC2::SubnetRouteTableAssociation
  DependsOn:
   - PrivateSubnet2
   - natRouteTable
   - natGW
  Properties:
   SubnetId: !Ref PrivateSubnet2
   RouteTableId: !Ref natRouteTable

 natGW:
  DependsOn:
   - GatewayToInternet
   - natEIP
   - PublicSubnet2
  Type: AWS::EC2::NatGateway
  Properties:
   AllocationId:
    Fn::GetAtt:
    - natEIP
    - AllocationId
   SubnetId: !Ref PublicSubnet2
   Tags:
    - Key: Name
      Value: !Join [ "", [ !Ref "AWS::StackName", "-natGW" ]]

 natEIP:
  Type: AWS::EC2::EIP
  Properties:
   Domain: vpc

 natRouteTable:
  Type: AWS::EC2::RouteTable
  DependsOn: VPC
  Properties:
   VpcId: !Ref VPC
   Tags:
    - Key: Name
      Value: !Join [ "", [ !Ref "AWS::StackName", "-nat" ]]

 natRoute:
  DependsOn: 
   - PublicRouteTable
   - natGW
  Type: AWS::EC2::Route
  Properties:
   RouteTableId: !Ref natRouteTable
   DestinationCidrBlock: 0.0.0.0/0
   NatGatewayId: !Ref natGW

 PrivateSubnet1:
  Type: AWS::EC2::Subnet
  DependsOn: VPC
  Properties:
   VpcId: !Ref VPC
   AvailabilityZone: !Join [ "", [ !Ref "AWS::Region", !Ref AvailabilityZone1 ]]
   CidrBlock: !Ref PrivateSubnetCidrBlock1
   Tags:
    - Key: Name
      Value: !Join [ "", [ !Ref "AWS::StackName", "-private-az1" ]]
   
 PrivateSubnet2:
  Type: AWS::EC2::Subnet
  DependsOn: VPC
  Properties:
   VpcId: !Ref VPC
   AvailabilityZone: !Join [ "", [ !Ref "AWS::Region", !Ref AvailabilityZone2 ]]
   CidrBlock: !Ref PrivateSubnetCidrBlock2
   Tags:
    - Key: Name
      Value: !Join [ "", [ !Ref "AWS::StackName", "-private-az2" ]]

 PrivateRouteTable:
  Type: AWS::EC2::RouteTable
  DependsOn: VPC
  Properties:
   VpcId: !Ref VPC
   Tags:
    - Key: Name
      Value: !Join [ "", [ !Ref "AWS::StackName", "-private" ]]

 PrivateSubnetRouteTableAssociation1:
  Type: AWS::EC2::SubnetRouteTableAssociation
  DependsOn:
   - PrivateSubnet1
   - PrivateRouteTable
  Properties:
   SubnetId: !Ref PrivateSubnet1
   RouteTableId: !Ref PrivateRouteTable

 PrivateSubnetRouteTableAssociation2:
  Type: AWS::EC2::SubnetRouteTableAssociation
  DependsOn:
   - PrivateSubnet2
   - PrivateRouteTable
  Properties:
   SubnetId: !Ref PrivateSubnet2
   RouteTableId: !Ref PrivateRouteTable

 RemoteAccessSecurityGroup:
  Type: AWS::EC2::SecurityGroup
  Properties:
   GroupDescription: Instance Access over VPN/Direct Connect
   VpcId: !Ref VPC
   Tags:
    - Key: Name
      Value: !Join [ "", [ !Ref "AWS::StackName", "-remote-to-instance" ] ]
   SecurityGroupIngress:
    - IpProtocol: "-1"
      CidrIp: !Ref RemoteCidrForSecurityGroup
   SecurityGroupEgress:
    - IpProtocol: "-1"
      CidrIp: 0.0.0.0/0

 InternalAccessSecurityGroup:
  Type: AWS::EC2::SecurityGroup
  Properties:
   GroupDescription: Instance Access internally
   VpcId: !Ref VPC
   Tags:
    - Key: Name
      Value: !Join [ "", [ !Ref "AWS::StackName", "-instance-to-instance" ] ]
   SecurityGroupIngress:
    - IpProtocol: "-1"
      CidrIp: !Ref RemoteCidrForSecurityGroup
   SecurityGroupEgress:
    - IpProtocol: "-1"
      CidrIp: 10.0.0.0/16
    - IpProtocol: "-1"
      CidrIp: 0.0.0.0/0

Outputs:
 VPC:
  Description: K8S vpc
  Value: !Ref VPC
  Export:
   Name: !Join [ "-", [ !Ref "AWS::StackName", VPC ]]
 PublicSubnetAz1:
  Description: Public Subnet in AZ1
  Value: !Ref PublicSubnet1
  Export:
   Name: !Join [ "-", [ !Ref "AWS::StackName", PublicSubnetAz1 ]]
 PublicSubnetAz2:
  Description: Public Subnet in AZ2
  Value: !Ref PublicSubnet2
  Export:
   Name: !Join [ "-", [ !Ref "AWS::StackName", PublicSubnetAz2 ]]
 PrivateSubnetAz1:
  Description: Private Subnet in AZ1
  Value: !Ref PrivateSubnet1
  Export:
   Name: !Join [ "-", [ !Ref "AWS::StackName", PrivateSubnetAz1 ]]
 PrivateSubnetAz2:
  Description: Private Subnet in AZ2
  Value: !Ref PrivateSubnet2
  Export:
   Name: !Join [ "-", [ !Ref "AWS::StackName", PrivateSubnetAz2 ]]
 AccessSg:
  Description: SecurityGroup that allows access from internet
  Value: !Ref RemoteAccessSecurityGroup
  Export: 
   Name: !Join [ "-", [ !Ref "AWS::StackName", AccessSg ]]
 InternalSg:
  Description: SecurityGroup that allows between instances
  Value: !Ref InternalAccessSecurityGroup
  Export: 
   Name: !Join [ "-", [ !Ref "AWS::StackName", InternalSg ]]
